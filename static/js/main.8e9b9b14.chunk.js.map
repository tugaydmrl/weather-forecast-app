{"version":3,"sources":["components/WeatherInfo.js","App.js","index.js"],"names":["WeatherInfo","date","mintemp","maxtemp","condition","icon","dateDay","Date","className","src","alt","getDay","App","useState","location","setLocation","city","setCity","weather","setWeather","params","key","useEffect","fetch","then","response","json","data","name","onKeyDown","event","keyCode","onChange","target","value","type","placeholder","onClick","current","forecast","forecastday","map","item","day","text","mintemp_c","maxtemp_c","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAeeA,MAZf,YAAiE,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,UAAWC,EAAO,EAAPA,KAEnDC,EAAU,IAAIC,KAAKN,GAGvB,OAAO,sBAAKO,UAAU,eAAf,UACD,qBAAKA,UAAU,eAAeC,IAAKJ,EAAMK,IAAKN,IAC9C,+BAAOA,IACP,uCAAUF,EAAV,cAA2BC,EAA3B,WACA,4BAAyB,IAArBG,EAAQK,SAAiB,SAAgC,IAArBL,EAAQK,SAAiB,SAAgC,IAArBL,EAAQK,SAAiB,UAAiC,IAArBL,EAAQK,SAAiB,YAAmC,IAArBL,EAAQK,SAAiB,WAAkC,IAArBL,EAAQK,SAAiB,SAAW,iBCqD3NC,MA7Df,WAAgB,IAAD,EACmBC,mBAAS,SAD5B,mBACNC,EADM,KACIC,EADJ,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGiBJ,mBAAS,IAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAKPC,EAAS,CACbC,IAAK,kCACLP,YAWF,OARAQ,qBAAU,WACRC,MAAM,kDAAD,OAC+CH,EAAOC,IADtD,cAC+DD,EAAON,SADtE,YAGFU,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUR,EAAWQ,QAC5B,CAACb,IAGF,qCACE,qBAAKN,UAAU,SAAf,SACE,gEACiC,IAC9BU,EAAQJ,SAAWI,EAAQJ,SAASc,KAAO,eAGhD,sBAAKpB,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,uBACEqB,UAAW,SAACC,GAAD,OACS,KAAlBA,EAAMC,QAAiBhB,EAAYC,GAAQ,MAE7CgB,SAAU,SAACF,GAAD,OAAWb,EAAQa,EAAMG,OAAOC,QAC1CC,KAAK,OACLC,YAAY,sBAEd,wBAAQ5B,UAAU,gBAAgB6B,QAAS,kBAAMtB,EAAYC,IAA7D,uBAIF,qBAAKR,UAAU,kBAAf,SACGU,EAAQoB,QACPpB,EAAQqB,SAASC,YAAYC,KAAI,SAACC,GAAD,OAC/B,cAAC,EAAD,CACExB,QAASA,EACTjB,KAAMyC,EAAKzC,KACXG,UAAWsC,EAAKC,IAAIvC,UAAUwC,KAC9BvC,KAAMqC,EAAKC,IAAIvC,UAAUC,KACzBH,QAASwC,EAAKC,IAAIE,UAClB1C,QAASuC,EAAKC,IAAIG,eAItB,sBAAMtC,UAAU,QAAhB,8CCpDZuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8e9b9b14.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./WeatherInfo.scss\";\r\n\r\nfunction WeatherInfo({date, mintemp, maxtemp, condition, icon}) {\r\n  \r\n  let dateDay = new Date(date);\r\n\r\n   \r\n  return <div className=\"weather-card\">\r\n        <img className=\"weather-icon\" src={icon} alt={condition} />\r\n        <span>{condition}</span>\r\n        <h3>Min: {mintemp}°C Max: {maxtemp}°C</h3>\r\n        <p>{dateDay.getDay() === 0 ? 'Sunday' : dateDay.getDay() === 1 ? 'Monday' : dateDay.getDay() === 2 ? 'Tuesday' : dateDay.getDay() === 3 ? 'Wednesday' : dateDay.getDay() === 4 ? 'Thursday' : dateDay.getDay() === 5 ? 'Friday' : 'Saturday'}</p>\r\n    </div>;\r\n}\r\nexport default WeatherInfo;\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport WeatherInfo from \"./components/WeatherInfo\";\n\nfunction App() {\n  const [location, setLocation] = useState(\"Bursa\");\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const params = {\n    key: \"a0d6503bbed8451c8f4173955211103\",\n    location,\n  };\n\n  useEffect(() => {\n    fetch(\n      `http://api.weatherapi.com/v1/forecast.json?key=${params.key}&q=${params.location}&days=3`\n    )\n      .then((response) => response.json())\n      .then((data) => setWeather(data));\n  }, [location]);\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1>\n          3 Days Weather Information for{\" \"}\n          {weather.location ? weather.location.name : \"nothing\"}\n        </h1>\n      </div>\n      <div className=\"App\">\n        <div className=\"search\">\n          <input\n            onKeyDown={(event) =>\n              event.keyCode === 13 ? setLocation(city) : null\n            }\n            onChange={(event) => setCity(event.target.value)}\n            type=\"text\"\n            placeholder=\"Search for a city\"\n          />\n          <button className=\"search-button\" onClick={() => setLocation(city)}>\n            Search\n          </button>\n        </div>\n        <div className=\"weather-wrapper\">\n          {weather.current ? (\n            weather.forecast.forecastday.map((item) => (\n              <WeatherInfo\n                weather={weather}\n                date={item.date}\n                condition={item.day.condition.text}\n                icon={item.day.condition.icon}\n                mintemp={item.day.mintemp_c}\n                maxtemp={item.day.maxtemp_c}\n              />\n            ))\n          ) : (\n            <span className=\"error\">Please check city name!</span>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}